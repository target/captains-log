(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[22],{6165:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return r},metadata:function(){return l},toc:function(){return s},default:function(){return p}});var o=t(2122),a=t(9756),i=(t(7294),t(3905)),r={},l={unversionedId:"contributing/README",id:"contributing/README",isDocsHomePage:!1,title:"Contributing",description:"Developing",source:"@site/docs/contributing/README.md",sourceDirName:"contributing",slug:"/contributing/README",permalink:"/captains-log/docs/contributing/README",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/contributing/README.md",version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Examples",permalink:"/captains-log/docs/examples/README"},next:{title:"Contributor Covenant Code of Conduct",permalink:"/captains-log/docs/code-of-conduct/README"}},s=[{value:"Developing",id:"developing",children:[]},{value:"Testing Your Changes",id:"testing-your-changes",children:[{value:"Command Line",id:"command-line",children:[]},{value:"Drone Exec",id:"drone-exec",children:[]}]}],u={toc:s};function p(e){var n=e.components,t=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"developing"},"Developing"),(0,i.kt)("p",null,"Once you've cloned the repo, make sure everything is running as expected."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"yarn\n\nyarn test\n")),(0,i.kt)("p",null,"Given the tests have passed, you can begin developing. If you'd like to run the tests while you're working you can use ",(0,i.kt)("inlineCode",{parentName:"p"},"yarn test:watch")," (runs Jest in watch mode). Be sure to write tests, when applicable, for any new changes."),(0,i.kt)("p",null,"Once you've completed your work, you should test your changes."),(0,i.kt)("h2",{id:"testing-your-changes"},"Testing Your Changes"),(0,i.kt)("p",null,"There are different ways to test your changes."),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Command Line - runs node directly, but you have to provide the plugin values"),(0,i.kt)("li",{parentName:"ol"},"Drone Exec - runs the plugin in drone as it would in the pipeline, you will still have to provide the secrets."),(0,i.kt)("li",{parentName:"ol"},"Vela exec - ",(0,i.kt)("em",{parentName:"li"},"coming soon"))),(0,i.kt)("h3",{id:"command-line"},"Command Line"),(0,i.kt)("p",null,"Vela uses the convention ",(0,i.kt)("inlineCode",{parentName:"p"},"PARAMETER_<key>"),". Drone uses the convention of ",(0,i.kt)("inlineCode",{parentName:"p"},"PLUGIN_<key>")," in order to access yaml variables in plugins. For instance, if you were to create a new key called ",(0,i.kt)("inlineCode",{parentName:"p"},"super_cool_key")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"yaml"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"my-release-log-step:\n  image: target/captains-log:1\n  secrets: [SLACK_TOKEN, SLACK_URL, GITHUB_TOKEN]\n  github_owner: ReactTraining\n  github_repo: react-media\n  super_cool_key: ROCK STAR\n")),(0,i.kt)("p",null,"In the plugin, you would access that via ",(0,i.kt)("inlineCode",{parentName:"p"},"process.env.PARAMETER")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"process.env.PLUGIN_SUPER_COOL_KEY"),"."),(0,i.kt)("p",null,"Vela and Drone secrets, however, are their names alone. Therefore, ",(0,i.kt)("inlineCode",{parentName:"p"},"SLACK_TOKEN"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"SLACK_URL"),", and ",(0,i.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN")," will all be accessed via those names."),(0,i.kt)("p",null,"The following is an example of all environment variables you will need in order to run Captains Log:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"GITHUB_TOKEN=<insert_GH_token> PLUGIN_GITHUB_OWNER=<repo_owner> PLUGIN_GITHUB_REPO=<your_repo> PLUGIN_JIRA_TEAM_DOMAIN=<your_namespace> node index.js\n")),(0,i.kt)("p",null,"If you want to run it with ",(0,i.kt)("inlineCode",{parentName:"p"},"teams"),", you can use the following example and modify it as needed:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'GITHUB_TOKEN=<insert_GH_token> PLUGIN_GITHUB_OWNER=<repo_owner> PLUGIN_GITHUB_REPO=<your_repo> PLUGIN_JIRA_TEAM_DOMAIN=<your_namespace> PLUGIN_GITHUB_TAG_ID=\'v([0-9]+-release)$\' PLUGIN_TEAMS="[{\\"name\\":\\"MY_TEAM\\",\\"color\\":\\"#FFDC18\\",\\"emoji\\":\\"<2728>\\",\\"mentions\\":\\"@person1  @person2\\",\\"issueTracking\\":{\\"jira\\":{\\"projects\\":[\\"DISCO\\",\\"SUPER\\"]}}}]"\n')),(0,i.kt)("p",null,"If you'd like to test sending this to a slack channel, you can either prepend the ",(0,i.kt)("inlineCode",{parentName:"p"},"SLACK_URL")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"SLACK_TOKEN")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"PLUGIN_SLACK_CHANNEL"),"."),(0,i.kt)("h3",{id:"drone-exec"},"Drone Exec"),(0,i.kt)("p",null,"You'll want to make sure you have the Drone CLI installed: ",(0,i.kt)("a",{parentName:"p",href:"http://docs.drone.io/cli-installation/"},"Instructions here"),"."),(0,i.kt)("p",null,"Once you've got the Drone CLI, you'll want to create a temp or test directory in which you can write to a temporary ",(0,i.kt)("inlineCode",{parentName:"p"},".drone.yml")," file. Inside of the file you'll start with the basics and then add in the plugin. For example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"---\npipeline:\n  captains-log:\n    image: target/captains-log:1\n    secrets: [SLACK_TOKEN, SLACK_URL, GITHUB_TOKEN]\n    github_owner: ReactTraining\n    github_repo: react-media\n    jira_team_domain: myteamnamespace\n")),(0,i.kt)("p",null,"After you've written to the ",(0,i.kt)("inlineCode",{parentName:"p"},".drone.yml"),", you can run the following in the directory where you've saved your file:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"GITHUB_TOKEN=<your_token> SLACK_URL=<your_webhook_url> drone exec")),(0,i.kt)("p",null,"(Drone will load the environment variables you pass to it, that way you can simulate secrets with the ",(0,i.kt)("inlineCode",{parentName:"p"},"exec")," command)."),(0,i.kt)("p",null,"This process replicates what the the plugin goes through when running live. If the run passes and you see what you expect, there will be a much higher confidence that things are operating correctly."),(0,i.kt)("hr",null))}p.isMDXComponent=!0}}]);